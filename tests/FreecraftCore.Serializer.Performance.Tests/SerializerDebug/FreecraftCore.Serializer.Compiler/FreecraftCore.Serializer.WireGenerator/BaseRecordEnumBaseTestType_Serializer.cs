using System;
using System.Collections.Generic;
using System.Runtime.CompilerServices;
using System.Text;
using FreecraftCore.Serializer;
using FreecraftCore;

namespace FreecraftCore
{
	[AutoGeneratedWireMessageImplementationAttribute]
	public partial record BaseRecordEnumBaseTestType : IWireMessage<BaseRecordEnumBaseTestType>
	{
		public virtual Type SerializableType => typeof(BaseRecordEnumBaseTestType);
		public virtual BaseRecordEnumBaseTestType Read(Span<byte> buffer, ref int offset)
		{
			throw new NotSupportedException("Record types do not support WireMessage Read.");
		}

		public virtual void Write(BaseRecordEnumBaseTestType value, Span<byte> buffer, ref int offset)
		{
			BaseRecordEnumBaseTestType_Serializer.Instance.Write(this, buffer, ref offset);
		}
	}
}

namespace FreecraftCore
{
	[System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
	//THIS CODE IS FOR AUTO-GENERATED SERIALIZERS! DO NOT MODIFY UNLESS YOU KNOW WELL!
	/// <summary>
	/// FreecraftCore.Serializer's AUTO-GENERATED (do not edit) serialization
	/// code for the Type: <see cref = "BaseRecordEnumBaseTestType"/>
	/// </summary>
	public sealed partial class BaseRecordEnumBaseTestType_Serializer : BasePolymorphicAutoGeneratedRecordSerializerStrategy<BaseRecordEnumBaseTestType_Serializer, BaseRecordEnumBaseTestType, Int16>
	{
		protected override BaseRecordEnumBaseTestType CreateType(int key, Span<byte> buffer, ref int offset)
		{
			switch (key)
			{
				case (int)TestEnumOpcode.One:
					return RecordEnumBaseTestType_Serializer.Instance.Read(buffer, ref offset);
				case 2:
					return RecordEnumBaseTestType2_Serializer.Instance.Read(buffer, ref offset);
				default:
					throw new NotImplementedException($"Encountered unimplemented sub-type for Type: {nameof(BaseRecordEnumBaseTestType)} with Key: {key}");
			}
		}
	}
}